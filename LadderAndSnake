
import java.util.Scanner;
import java.util.Random;

public class LadderAndSnake {
	
	private int NBofPlayers;
	String temp = "~~";
	String names;
	Scanner key = new Scanner(System.in);
	
	
	
	private board[][] board_map = new board [10][10];
	private players[] playerArray = new players[5];

	
	public void board_map()
	{
		int a=1;
		
		for(int b=0;b<10;b++)
		{
			for(int c=0;c<10;c++,a++)
				board_map[b][c] = new board("~~", a);
		}
	}

	

	public void Map_Print(String name_player, int position)
	{
		System.out.println("_______________________________________________________________________________________________________________");
		System.out.println();
		for(int b=0; b<10; b++)
		{
			for(int c=0; c<10; c++)
			{
				if(board_map[b][c].getPlayer_Name().equals(name_player))
				{
					board_map[b][c].setPlayer_Name("~~");
				}
			}
		}
		
		
		
		for(int b=0; b<1; b++)
		{
			for(int c=0; c<10; c++)
			{
				if(board_map[b][c].getPlayLoc() == position)
				{
					board_map[b][c].setPlayer_Name(name_player);
				}
			}
		}
		
		
		for(int b=0; b<1; b++)
		{
			for(int c=0; c<10; c++)
			{
			
				
				//Player's name assigned to its position
				if(board_map[b][c].getPlayLoc() == position)
				{
						System.out.print("|____" + board_map[b][c].getPlayer_Name() + "____");
						
					
					//System.out.println(                                 "Player 4 ");
				}
				
				
				else if(board_map[b][c].getPlayer_Name().equals("~~"))
				{
					if(board_map[b][c].getPlayLoc() == 100) {
						System.out.println("_____@" + board_map[b][c].getPlayLoc() + "_____#");}
					
					
					if(board_map[b][c].getPlayLoc() < 100) {
					System.out.print("|_____" + board_map[b][c].getPlayLoc() + "____");}
				}
				
				
				else if(!board_map[b][c].getPlayer_Name().equals("~~"))
				{
					System.out.print("|____" + board_map[b][c].getPlayer_Name() + "____");
				}
			}
			System.out.println();
			System.out.println();
		}
		
	
	//Set the player to it's new position
		for(int b=1; b<10; b++)
		{
			for(int c=0; c<10; c++)
			{
				if(board_map[b][c].getPlayLoc() == position)
				{
					board_map[b][c].setPlayer_Name(name_player);
				}
			}
		}
		
		
		for(int b=1; b<10; b++)
		{
			for(int c=0; c<10; c++)
			{
			
				
				
				if(board_map[b][c].getPlayLoc() == position)
				{
						System.out.print("|____" + board_map[b][c].getPlayer_Name() + "____");
						
					
					//System.out.println(                                 "Player 4 ");
				}
				
				else if(board_map[b][c].getPlayer_Name().equals("~~"))
				{
					if(board_map[b][c].getPlayLoc() == 100) {
						System.out.println("|___" + board_map[b][c].getPlayLoc()+"____" );}
					
					if(board_map[b][c].getPlayLoc() < 100) {
					System.out.print("|____" +board_map[b][c].getPlayLoc() + "____");}
				}
				
				
				else if(!board_map[b][c].getPlayer_Name().equals("~~"))
				{
					System.out.print("|____" + board_map[b][c].getPlayer_Name() + "____");
				}
			}
			System.out.println();
			System.out.println();
		}
		
		
	}
	
	/**
	 * Constructor
	 * @param NBofPlayers
	 * */
	

	
	public LadderAndSnake (int NBofPlayers)
	{
		this.NBofPlayers = NBofPlayers;
		System.out.println("\nThe number of players: " + NBofPlayers + ".\n");
		
		
		for (int b = 0; b < NBofPlayers; b++) {
		
			
			if(b == 0)
			{
				System.out.print("Please enter #" + (b + 1) + " Player's name: ");
	            
	            
	            names = key.next();
	            
	            playerArray [0] = new players(names, "\uD83D\uDE00", b, b, false, false);
	            
	            playerArray[0].setNames(names);
	            playerArray[0].setNameOfPlayer("\uD83D\uDE00");
	            System.out.print('\t' + playerArray[b].getNames() + " will be assigned to: " + "\uD83D\uDE00");
	            
			}
			
			if(b == 1)
			{
				System.out.print("Please enter #" + (b + 1) + " Player's name: ");
	            
	            
	            names = key.next();
	            
	            playerArray [1] = new players(names, "\uD83D\uDE08", b, b, false, false);
	            playerArray[1].setNames(names);
	            playerArray[1].setNameOfPlayer("\uD83D\uDE08");
	            System.out.print('\t' + playerArray[b].getNames() + " will be assigned to: " + "\uD83D\uDE08" );
	            
			}
			
			if(b == 2)
			{
				System.out.print("Please enter #" + (b + 1) + " Player's name: ");
	            
	            
	            names = key.next();
	            
	            playerArray [2] = new players(names, "\uD83D\uDC79", b, b, false, false);
	            playerArray[2].setNames(names);
	            playerArray[2].setNameOfPlayer("\uD83D\uDC79");
	            System.out.print('\t' + playerArray[b].getNames() + " will be assigned to: " + "\uD83D\uDC79" );
	            
			}
			
			if(b == 3)
			{
				System.out.print("Please enter #" + (b + 1) + " Player's name: ");
	            
	            
	            names = key.next();
	            
	            playerArray [3] = new players(names, "\uD83E\uDD20", b, b, false, false);
	            playerArray[3].setNames(names);
	            playerArray[3].setNameOfPlayer("\uD83E\uDD20");
	            System.out.print('\t' + playerArray[b].getNames() + " will be assigned to: " + "\uD83E\uDD20" );
	            
			}

			
	            System.out.println("\n");
		 
		 }
		 
		 

	}
	
	
	/**
	 * A method to declare an object array to "store" each player's information
	 * */
	
	//maximum of 4 players
	//"calling" the players class; ("name of the player", number on the dice, location, T/F repeated dice, T/F winner);
	
	public void setPlayerArray()
	{
		for(int b=0; b<NBofPlayers ; b++)
			playerArray[b] = new players (playerArray[b].getNames(), playerArray[b].getNameOfPlayer(), 0, 0, false, false);
		//playerArray[0] = new players (playerArray[0].getNames(),"\uD83D\uDE00", 0, 0, false, false);
		//playerArray[1] = new players (playerArray[1].getNames(),"\uD83D\uDE08", 0, 0, false, false);
		//playerArray[2] = new players (playerArray[2].getNames(),"\uD83D\uDC79", 0, 0, false, false);
		//playerArray[3] = new players (playerArray[3].getNames(),"\uD83E\uDD20", 0, 0, false, false);
		
		
		//this player is not used in the game but only for the method "play_order"
		playerArray[4] = new players (null,"CHECK ORDER", 0, 0, false, false);
	}
	
	/**
	 * @return generate a random number between 1 and 6
	 * */
	
	
	
	private static int rollDice() {
        int dice_nb;
        
        Scanner key = new Scanner(System.in);
        String rolling = key.nextLine();
        Random rand_num = new Random();
        
        dice_nb = rand_num.nextInt(6) + 1;
        return dice_nb;
    }
	
	
	
	/**
	 * A method for the players to roll the dice to determine the order in which the players will play before starting to play
	 * @param NBofPlayers
	 * */
	
	public void decidOrder(int numberOfPlayers) {
		setPlayerArray();
		System.out.println("Each player must throw the dice to obtain the largest possible number to determine the order in which the players will play!");
		int counter = 1;
		for (int i = 1; i < numberOfPlayers + 1; i++) {

			System.out.println("\nIt is " + playerArray[i-1].getNames() + "'s turn");

			System.out.print("  -> Please roll the dice (Click any button.)");
			
			int randomNum = rollDice();
			
			System.out.print("\t ~~> " + playerArray[i-1].getNames() + " rolled the dice and got " + randomNum + "\n");

			//Random rand = new Random();

			//int randomNum = rollDice();
					//rand.nextInt(6) + 1;
			//System.out.println("*" + randomNum + "*\n");

			if (i == 1) {
				playerArray[0].setNumOnDice(randomNum);
			} else if (i == 2) {
				playerArray[1].setNumOnDice(randomNum);
			} else if (i == 3) {
				playerArray[2].setNumOnDice(randomNum);
			} else if (i == 4) {
				playerArray[3].setNumOnDice(randomNum);
			}
			counter++;
			
		}
		

	}

//=======================================================================================================
	/**
	 * a method to check the order of playing turns. the first for loop to sort the array order (players with higher dice number put at earlier turns); the second for loop to determine if there is a tie. If number of ties>3 will ask all players to roll the dice again, otherwise will user a tie method
	 */
	public void checkOder() {
		int sameDice = 0;
		//boolean tie = false;
		for (int i = 0; i < NBofPlayers; i++) {
			for (int j = i + 1; j < NBofPlayers; j++) {
				if (playerArray[i].getNumOnDice() < playerArray[j].getNumOnDice()) {
					playerArray[4] = playerArray[i];
					playerArray[i] = playerArray[j];
					playerArray[j] = playerArray[4];
				}
			}

		}
		for (int i = 0; i < NBofPlayers; i++) {
			for (int j = i + 1; j < NBofPlayers; j++) {
				if (playerArray[i].getNumOnDice() == playerArray[j].getNumOnDice()) {
					sameDice++;
					System.out.println("\n~~~ The is a tie between "+playerArray[i].getNames() + " and " + playerArray[j].getNames() + " ~~~");
					playerArray[i].setNumDiceRepeat(true);
					playerArray[j].setNumDiceRepeat(true);
					//tie = true;
				}
			}
		}
		if (sameDice >= 2) {
			System.out.println("You all need to re-role!\n");
			decidOrder(NBofPlayers);
		} else if (sameDice == 1) {

			tie();
		}

		
	}

	// ========================================================================================
	/**
	 * a method to solve the tie issue. the first for loop to ask the user to roll the dice. the second for loop to sort the order. if another tie is reached call the tie method again.
	 */
	public void tie() {
		for (int i = 0; i < NBofPlayers; i++) {
			if (playerArray[i].isNumDiceRepeat()) {
				System.out.print("\nIt is " + playerArray[i].getNames() + "'s turn." + "\n" + "  -> Please roll the dice (Press 'Enter').");
				
				String enter = key.nextLine();
				playerArray[i].setNumOnDice(rollDice());
				
				System.out.println("\t ~~> " + playerArray[i].getNames() + " rolled the dice and got " + playerArray[i].getNumOnDice() + "");
			}
		}
		for (int i = 0; i < NBofPlayers; i++) {
			for (int j = i + 1; j < NBofPlayers; j++) {
				if (playerArray[i].isNumDiceRepeat() && playerArray[j].isNumDiceRepeat()) {
					if (playerArray[i].getNumOnDice() < playerArray[j].getNumOnDice()) {
						playerArray[4] = playerArray[i];
						playerArray[i] = playerArray[j];
						playerArray[j] = playerArray[4];
					} else if (playerArray[i].getNumOnDice() == playerArray[j].getNumOnDice()) {
						System.out.println("It is a tie again between " + playerArray[i].getNames() + " and " + playerArray[j].getNames());
						tie();
					}

				}
			}
		}
	}

//======================================================================================================
	/**
	 * a method to print out the order of playing turns
	 */
	public void printOrder() {
		System.out.println("\nThe order is: ");
		for (int i = 0; i < NBofPlayers; i++) {

			System.out.println("\t - " + playerArray[i].getNames() + " ");
		}
	}
	
	/**
	 * A method to start playing that game a player at a time following the players array
	 * The method contains a while loop which lets the players roll the dice till there's a winner.
	 * */
	
	public void playing_Snk()
	{
		printOrder();
		for (int i =0; i<NBofPlayers; i++)
		while (!playerArray[i].isChampion() )
		{
			for(int b=0; b<NBofPlayers && !playerArray[i].isChampion() ; b++)
			{
				System.out.print("\n~~ It is " + playerArray[b].getNames() + "'s turn. (" + playerArray[b].getNameOfPlayer() + ")");
				System.out.println(" Please roll the dice! (Click on any button)");
				
				int c =0;
				c = rollDice();
				
				playerArray[b].PlayerMovement(c);
		
			//Player face a ladder or the head of a snake
				playerArray[b].setPlayLoc(Ladders_and_Snakes(playerArray[b].getPlayLoc()));
				
				if(playerArray[b].getPlayLoc() == 100)
				{
					playerArray[b].setChampion(true);
				}
				
				Map_Print(playerArray[b].getNameOfPlayer(), playerArray[b].getPlayLoc());
			}
			
		}
		
		key.close();
			
	}
	
	
	/**
	 * A method that analyzes the position of the player and if the player faces a ladder, the position will go
	 * up the board and if the player faces a snake's head, this method will change the position to the tail of
	 * snake.
	 * 
	 * @param new_position
	 * @return to the new position after the player faces either a ladder or a snake
	 * */
	
	public int Ladders_and_Snakes (int new_position)
	
	{
		System.out.print('\t');
		{
		if(new_position == 1)
		{
			System.out.println( "You have landed at the bottom of a ladder. You are going up to 38.");
			new_position = 38;
		}
		
		if(new_position == 4)
		{
			System.out.println( "You have  landed at the bottom of a ladder. You are going up to 14.");
			new_position = 14;
		}
		
		if(new_position == 9)
		{
			System.out.println( "You have landed at the bottom of a ladder. You are going up to 31.");
			new_position = 31;
		}
		
		if(new_position == 16)
		{
			System.out.println( "You have landed on the snake's head and got bit! You must go down to 6.");
			new_position = 6;
		}
		
		if(new_position == 28)
		{
			System.out.println( "You have landed at the bottom of a ladder. You are going up to 84.");
			new_position = 84;
		}
		
		if(new_position == 21)
		{
			System.out.println( "You have landed at the bottom of a ladder. You are going up to 42.");
			new_position = 42;
		}
		
		if(new_position == 36)
		{
			System.out.println( "You have landed at the bottom of a ladder. You are going up to 44.");
			new_position = 44;
		}
		
		if(new_position == 48)
		{
			System.out.println( "You have landed on the snake's head and got bit! You must go down to 30.");
			new_position = 30;
		}
		
		if(new_position == 51)
		{
			System.out.println( "You have landed at the bottom of a ladder. You are going up to 67.");
			new_position = 67;
		}
		
		if(new_position == 64)
		{
			System.out.println( "You have landed on the snake's head and got bit! You must go down to 60.");
			new_position = 60;
		}
		
		if(new_position == 71)
		{
			System.out.println( "You have landed at the bottom of a ladder. You are going up to 91.");
			new_position = 91;
		}
		
		if(new_position == 79)
		{
			System.out.println( "You have landed on the snake's head and got bit! You must go down to 19.");
			new_position = 19;
		}
		
		if(new_position == 80)
		{
			System.out.println( "You have landed at the bottom of a ladder. You are going up to 100.");
			new_position = 100;
		}
		
		if(new_position == 93)
		{
			System.out.println( "You have landed on the snake's head and got bit! You must go down to 68.");
			new_position = 68;
		}
		
		if(new_position == 95)
		{
			System.out.println( "You have landed on the snake's head and got bit! You must go down to 24.");
			new_position = 24;
		}
		
		if(new_position == 97)
		{
			System.out.println( "You have landed on the snake's head and got bit! You must go down to 76.");
			new_position = 76;
		}
		
		if(new_position == 98)
		{
			System.out.println( "You have landed on the snake's head and got bit! You must go down to 78.");
			new_position = 78;
		}
		
		System.out.println();
		return new_position;
		
		}
	}
	
	
	
}
